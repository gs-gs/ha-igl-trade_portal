PYTHONDONTWRITEBYTECODE=1
REDIS_URL=redis://redis:6379/0
USE_DOCKER=yes
IPYTHONDIR=/app/.ipython
DJANGO_DEBUG=True
DJANGO_AWS_ACCESS_KEY_ID=minidemoaccess
DJANGO_AWS_SECRET_ACCESS_KEY=miniodemosecret
DJANGO_AWS_STORAGE_BUCKET_NAME=storage
S3_ENDPOINT_URL=http://minio:9000
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_DB=postgres
POSTGRES_USER=postgres
POSTGRES_PASSWORD=
PYTHONUNBUFFERED=1

# commented because by default we don't have IG connection
# see uncommented in the demo-{COUNTRY}.env files
# IGL_SUBSCRAPI_ENDPOINT=http://subscriptions_api:5000
# IGL_MESSAGEAPI_ENDPOINT=http://message_api:5000
# IGL_DOCUMENTAPI_ENDPOINT=http://document_api:5000

# These values go to generated OA documents, "issuers" section
OA_NOTARY_CONTRACT=0xa57812DeC86336809Ea68987AbaA1669DeA31541
OA_ISSUER_DID=did:ethr:0x18E421E04D42aE8205eCA6a5C2D0E16d2ad0A1eb
# current domain name is used if empty
OA_NOTARY_DOMAIN=

# this is just helper API providing some functions from open-attestation JS library.
# You should start it locally or use any existing setup. It's called only when OA file is
# generated and is about to be notarized.
OA_WRAP_API_URL=http://docker-host:9010


# set these variables for OA files to be notarized be submitted there.
# notarisation worker will listen for them and process them.
# Use OA_AWS_ACCESS_KEYS to provide you AWS access and secret key, or leave it empty to get them from default source.
OA_UNPROCESSED_QUEUE_URL=
OA_UNPROCESSED_BUCKET_NAME=
OA_AWS_ACCESS_KEYS=:
AWS_REGION=ap-southeast-2

# You can start this API youself (see /tradetrust/open-attestation-verify-api/docker-compose.yml)
# or use any existing setup.
# Existing:
OA_VERIFY_API_URL=https://openattverify.c1.devnet.trustbridge.io/verify/fragments
# Your own:
# OA_VERIFY_API_URL=http://docker-host:9011/verify/fragments

# These values will be baked in your OA documents created by this setup
UA_BASE_HOST=https://trade.c1.devnet.trustbridge.io/v/
OA_RENDERER_HOST=https://renderer-openatt.c1.devnet.trustbridge.io
